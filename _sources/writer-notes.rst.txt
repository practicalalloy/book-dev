Writer notes
*************

.. highlight:: none

Structure discussed during the last telco
==========================================

.. code-block:: 

   chapters/structural-modeling/index, funs and preds 

      topics/nary-relations/index

      topics/testing-instances/index some disj

      topics/evaluator/index structural only

      topics/integers/index

      topics/derived relations/index impact on the theme

      topics/subsignatures/index ex: sig S = R +T

      topics/multiplicity constraints (also talk about the bestiary)
      topics/type system from user perspective (also mention overloading)
      
   chapters/behavior-modeling/index focus only on safety?  talk about subset sigs, use accessible and trashed
      topics/scenarios/index behavioural scenarios
      topics/event-depiction/index
      topics/mutable top level sigs (mutable universe....)
      topics/modules/index parametrize Trash and apply it to filesystem? issue with dirs containing sub-objects

    topics/evaluator/index behavioral evaluator


     blue card Alloy history, Electrum, Alloy 6
 
   chapters/protocol-design/index, talk about ordering for ids, talk only about weak fairness (non point-wise), use local frame

     topics/frame-conditions/index

     topics/sequences/index ordered delivery

      topics/true-concurrency/index
      topics/generator-axioms/index   introduce message and show the problems with animation and the need for generator axioms
      topics/fairness/index talk about enabled an unconditional and strong fairness
      topics/macros/index (good for unchanged)
 
      blue card Alloy vs TLA+
      
   chapters/system-design/index
      topics/standard library
      topics/enum 

    topics/recursion/index (native recursion vs aditional relations with axiomatization - e.g. shortest paths)

      topics/meta/index (apply to frame conditions)
      topics/composition/index ???
      

    blue card Alloy vs B  aka the french card   









Auto-build
===========

Use the PIP-installable ``sphinx-autobuild`` tool to get auto-compile and auto-refresh of the web page by running ``sphinx-autobuild source build/html``.

Alloy code style by default
============================

If you use plain single quotes, you now get **by default** the Alloy style `like this`. 

If you just want monospaced but non-Alloy text, use **two single quotes in a row** ``like this``. 

Finally, you can use single quotes plus a so-called "role" (a prefix between colons, for instance: ``:code:``) :code:`like this`, in which case the layout associated to this role is applied (note: the layout for ``:code:`` is NOT Alloy).

**If you copy-paste text from ``old-source/`` and if you want Alloy highlighting, please remove ":code:" from the text and keep single-quotes only.**

Foldouts, index cards and the like
===================================


.. card:: Alloy and Electrum
   :class-card: sd-outline-danger

   :octicon:`alert;1em;sd-text-danger` Warning
   ^^^
   This is an example of a so-called ``card``. 

I have created a ``cards/`` directory which contains the code for cards. Every such card if of the following form. Here I show card ``cards/nary-relations.rst`` and, as you can see, it implements a hyperlink to a section or chapter of target anchor ``nary-relations``:

.. code::

   .. card:: N-ary Relations
      :link-type: ref
      :link: nary-relations

      :octicon:`link` Further reading
      ^^^

which gives:

.. card:: N-ary Relations
   :link-type: ref
   :link: nary-relations

   :octicon:`link` Further reading
   ^^^

Then this card can be included in several places of the book. For instance, it can appear immediately after a certain discussion *and* at the end of the same chapter in a place summarizing all cards of the chapter. Inclusion if made with the command :

.. code::

   .. include:: cards/nary-relations.rst

which gives:


.. include:: cards/nary-relations.rst



Finally, inclusion also works in carousels (although carousels are bullsh*t!):

.. code:: 

   .. card-carousel:: 2

      .. include:: cards/nary-relations.rst

      .. card:: Event Depiction
         :link-type: ref
         :link: event-depiction

         :octicon:`link` Further reading
         ^^^
         To ease the visualization of events, a special technique can be used.

      .. card:: Modules
         :link-type: ref
         :link: modules

         :octicon:`link` Further reading
         ^^^
         Learn more about modules.

      .. card:: Frame Conditions
         :link-type: ref
         :link: frame-conditions

         :octicon:`link` Further reading
         ^^^
         There are many ways to specify frame conditions.      

which gives:

.. card-carousel:: 2

   .. include:: cards/nary-relations.rst

   .. card:: Event Depiction
      :link-type: ref
      :link: event-depiction

      :octicon:`link` Further reading
      ^^^
      To ease the visualization of events, a special technique can be used.

   .. card:: Modules
      :link-type: ref
      :link: modules

      :octicon:`link` Further reading
      ^^^
      Learn more about modules.

   .. card:: Frame Conditions
      :link-type: ref
      :link: frame-conditions

      :octicon:`link` Further reading
      ^^^
      There are many ways to specify frame conditions.            


Missing concepts to double-check
================================

These concepts that are currently not mentioned anywhere in the basic chapters/topics.

* :code:`let`-expressions
* :code:`String`
* :menuselection:`Execute --> Show Metamodel`
* unsat core
* signature facts, :alloy:`this` and :alloy:`@` prefix
* growing scopes

