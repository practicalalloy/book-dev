.. _app-design:

****************************************
App design
****************************************


.. index::
    concept

In his recent book `The Essence of Software <https://essenceofsoftware.com>`_ [JAC21]_, Daniel Jackson (also the inventor of Alloy) proposes a new theory of software design, where apps are viewed as a collection of so-called concepts. A *concept* "is a reusable unit of user-facing functionality that serves a well-defined and intelligible purpose". Reusability is a key attribute here, and the same software concept can appear again and again in different apps. Our file sharing app introduced in the :ref:`behavioral-modeling` chapter, is actually a combination of two such concepts: the extremely popular concept of *trash*, whose purpose is to allow the undo of deletions, and the also popular concept of *single use access token* which allows users to grant a one-time access to some resource to different parties (each gets a different token, so that access to one party can be revoked without affecting others). Both these concepts should be familiar to users, easing the process of learning how to use the app. The main novelty of an app is usually not in the individual core concepts it uses, but in the set of used concepts and in the creative interaction between those concepts. 

This chapter will describe how Alloy can be used to design both individual concepts and apps composed of interacting concepts. In particular, we will show how the file sharing app can be obtained by composing the concepts of trash and single use access token.
In the process we will introduce some of the ideas of the `The Essence of Software <https://essenceofsoftware.com>`_ book, but this introduction will of course be very superficial, and we strongly recommend you read it before reading this chapter. 


Formal design of software concepts
==================================

Another key attribute of software concepts is independence. Each concepts can be designed and understood in isolation, and can be defined without making references to other concepts. The `The Essence of Software <https://essenceofsoftware.com>`_ book recommends that concepts are described using state machines: each concept has a set of possible states and has actions that update or query those states. As mentioned about, each concept should also have a well-defined purpose and also some *operational principle*, an archetypal scenario (or scenarios) that clarifies how the concept fulfills its purpose. In this chapter we will describe how Alloy can be used in the formal design of individual concepts. A key activity in this process will be to verify that indeed the operational principle of the concept is valid given the proposed actions.

A semi-formal notation is proposed in the book to describe concepts. Here is the description of the trash concept.

.. code-block:: concepts

    concept trash [Item]
    purpose
        to allow undoing of deletions
    state
        accessible, trashed : set Item
    actions
        create (x : Item)
            when x not in accessible or trashed
            add x to accessible
        delete (x : Item)
            when x in accessible but not trashed
            move x from accessible to trashed
        restore (x : Item)
            when x in trashed
            move x from trashed to accessible
        empty ()
            when some item in trashed
            remove every item from trashed
    operational principle
        after delete(x), can restore(x) and then x in accessible
        after delete(x), can empty() and then x not in accessible or trashed    

As we can see here, concepts can be parametrized. In this case, the trash concept is parametrized by the set of items on which the actions operate. The state of a concept consists of several mutable sets and relationships. In this case we have two sets of items, one containing the accessible items and the other the trashed ones. Actions are described by a sequence of guards and effects expressed in a structured natural language, for example, using 'keyword' :code:`when` to distinguish guards. The operational principle is also described in structured natural language, now with a temporal logic flavor, using 'keywords' such as :code:`after` or :code:`and then`. Looking at this notation, it is rather obvious that Alloy is a good candidate for formally specifying and analyzing concepts. 





The single use access token is not described in the `The Essence of Software <https://essenceofsoftware.com>`_ book, but we could describe it in the above notation as follows.

.. code-block:: concepts

    concept token [Resource]
    purpose
        to grant a one-time revokable access to some resource
    state
        accessed, revoked : set Token
        token : Resource -> set Token
    actions
        create (r : Resource, t : Token)
            when t not in revoked or in the tokens of some resource
            add t to the tokens of r
        revoke (r : Resource, t : Token)
            when x in the tokens of r but not in accessed
            remove t from the tokens of r
            add t to revoked
        access (t : Token)
            when x in the tokens of some resource but not in accessed
            add t to accessed
    operational principle
        after create(r,t), can access(t) and then can never access(t)
        after revoke(r,t), can never access(t)    

This concept is parametrized by the set of resource objects, and its state includes not only mutable sets but also a mutable  relationship between tokens and resources.




Making concepts reusable
============================


Composing concepts to build apps
================================


Verifying app properties
========================

Exploring alternative designs
=============================